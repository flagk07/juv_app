import { supabase } from './supabase'

export async function migrateLocalStorageToSupabase() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é localStorage ‚Üí Supabase...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
    if (typeof window === 'undefined' || !window.localStorage) {
      throw new Error('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ localStorage
    const storedProducts = localStorage.getItem('juv_products');
    if (!storedProducts) {
      console.log('üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ localStorage –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return { success: true, migrated: 0 };
    }

    const localProducts = JSON.parse(storedProducts);
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ localStorage: ${localProducts.length}`);

    let migratedCount = 0;

    for (const product of localProducts) {
      try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase
        const supabaseProduct = {
          name: product.name || product.title,
          description: product.description,
          price: parseFloat(product.price),
          image_url: product.image_url || product.imageUrl,
          category: product.category,
          in_stock: product.in_stock !== false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
        const { data: existingProduct } = await supabase
          .from('products')
          .select('id')
          .eq('name', supabaseProduct.name)
          .single();

        if (existingProduct) {
          console.log(`‚è≠Ô∏è –¢–æ–≤–∞—Ä "${supabaseProduct.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ Supabase
        const { error } = await supabase
          .from('products')
          .insert(supabaseProduct);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ "${supabaseProduct.name}":`, error);
        } else {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä "${supabaseProduct.name}" –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
          migratedCount++;
        }

      } catch (productError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞:', productError);
      }
    }

    console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${migratedCount}`);
    
    return { 
      success: true, 
      migrated: migratedCount,
      total: localProducts.length
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

export async function syncSupabaseToLocalStorage() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Supabase ‚Üí localStorage...');

    const { data: products, error } = await supabase
      .from('products')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      throw new Error(`Supabase: ${error.message}`);
    }

    if (products && products.length > 0) {
      localStorage.setItem('juv_products', JSON.stringify(products));
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
      return { success: true, synced: products.length };
    } else {
      console.log('üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return { success: true, synced: 0 };
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
export async function testSupabaseConnection() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    const { data, error } = await supabase
      .from('products')
      .select('count(*)')
      .single();

    if (error) {
      throw new Error(`Supabase: ${error.message}`);
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    return { success: true, connected: true };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
    return { 
      success: false, 
      connected: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}
