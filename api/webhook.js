const { createClient } = require('@supabase/supabase-js');

// Initialize Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// OpenAI integration
async function callOpenAI(question) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ JUV. 

–í—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º —Å:
- –í—ã–±–æ—Ä–æ–º —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–º–Ω—è—Ö, –º–µ—Ç–∞–ª–ª–∞—Ö, –ø—Ä–æ–±–∞—Ö
- –£—Ö–æ–¥–æ–º –∑–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏  
- –ü–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Å—Ç–∏–ª—é
- –¶–µ–Ω–æ–≤—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏

–û—Ç–≤–µ—á–∞–π—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. 
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —é–≤–µ–ª–∏—Ä–Ω—ã–º–∏ –∏–∑–¥–µ–ª–∏—è–º–∏, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Ç–µ–º—É —É–∫—Ä–∞—à–µ–Ω–∏–π.
–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ - –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.`
          },
          {
            role: 'user',
            content: question
          }
        ],
        max_tokens: 200,
        temperature: 0.7
      })
    });

    const data = await response.json();
    return data.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.';
  } catch (error) {
    console.error('OpenAI Error:', error);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.';
  }
}

// Logging function
async function logUserAction(telegramId, username, actionType, metadata = null) {
  try {
    const { error } = await supabase
      .from('logs')
      .insert({
        telegram_id: telegramId,
        telegram_username: username,
        action_type: actionType,
        metadata: metadata
      });
    
    if (error) {
      console.error('Error logging user action:', error);
    }
  } catch (err) {
    console.error('Failed to log user action:', err);
  }
}

// Create user if not exists
async function ensureUser(telegramId, username) {
  try {
    const { data: existingUser } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (!existingUser) {
      const { data: newUser, error } = await supabase
        .from('users')
        .insert({
          telegram_id: telegramId,
          telegram_username: username
        })
        .select()
        .single();

      if (error) throw error;
      return newUser;
    }

    return existingUser;
  } catch (error) {
    console.error('Error ensuring user:', error);
    return null;
  }
}

// Send message to Telegram
async function sendMessage(chatId, text, replyMarkup = null) {
  const url = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`;
  
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };

  if (replyMarkup) {
    payload.reply_markup = replyMarkup;
  }

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    return await response.json();
  } catch (error) {
    console.error('Error sending message:', error);
    return null;
  }
}

// Main webhook handler
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    if (!update.message) {
      return res.status(200).json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const userId = message.from.id;
    const username = message.from.username;
    const text = message.text;

    // Ensure user exists
    await ensureUser(userId, username);

    // Handle commands
    if (text === '/start') {
      await logUserAction(userId, username, 'start_bot');
      
      const firstName = message.from.first_name || '–î—Ä—É–≥';

      await sendMessage(
        chatId,
        `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JUV, ${firstName}!\n\n` +
        `–ú—ã —Å–æ–∑–¥–∞–µ–º –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ —é–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`
      );
    }
    else if (text === '/shop') {
      await logUserAction(userId, username, 'open_webapp');
      
      const shopMenu = {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
              web_app: { url: 'https://juv-app.vercel.app/' }
            }
          ]
        ]
      };

      await sendMessage(
        chatId,
        'üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω JUV!\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —É–∫—Ä–∞—à–µ–Ω–∏–π:',
        shopMenu
      );
    }
    else if (text === '/assistant') {
      await logUserAction(userId, username, 'call_support');
      
      await sendMessage(
        chatId,
        'ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ JUV –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n' +
        '–Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —é–≤–µ–ª–∏—Ä–Ω—ã–º –∏–∑–¥–µ–ª–∏—è–º. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:'
      );
    }
    else if (text === '/menu') {
      await logUserAction(userId, username, 'open_menu');
      
      const menuKeyboard = {
        inline_keyboard: [
          [
            {
              text: 'üõç –ú–∞–≥–∞–∑–∏–Ω',
              web_app: { url: 'https://juv-app.vercel.app/' }
            }
          ],
          [
            {
              text: 'ü§ñ –ü–æ–º–æ—â—å',
              callback_data: 'help_assistant'
            }
          ],
          [
            {
              text: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
              callback_data: 'info'
            }
          ]
        ]
      };

      // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
      const adminId = process.env.ADMIN_ID || '195830791';
      if (userId.toString() === adminId) {
        menuKeyboard.inline_keyboard.splice(2, 0, [
          {
            text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            callback_data: 'stats'
          }
        ]);
      }

      await sendMessage(
        chatId,
        'üìã **–ú–µ–Ω—é JUV**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        menuKeyboard
      );
    }
    else if (text === '/help') {
      await sendMessage(
        chatId,
        'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üõç /shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n' +
        'ü§ñ /assistant - AI-–ø–æ–º–æ—â–Ω–∏–∫\n' +
        'üìã /menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n' +
        'üìû /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
        '‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!'
      );
    }
        else if (text === '/stats') {
      const adminId = process.env.ADMIN_ID || '195830791';
      if (userId.toString() === adminId) {
        // Admin stats
        try {
          const { count: userCount } = await supabase
            .from('users')
            .select('*', { count: 'exact', head: true });

          const { count: orderCount } = await supabase
            .from('orders')
            .select('*', { count: 'exact', head: true });

          await sendMessage(
            chatId,
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JUV:\n\n` +
            `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount || 0}\n` +
            `üõí –ó–∞–∫–∞–∑–æ–≤: ${orderCount || 0}`
          );
        } catch (error) {
          await sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
      } else {
        await sendMessage(chatId, '‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    }
    else if (text && !text.startsWith('/')) {
      // AI Assistant response
      await logUserAction(userId, username, 'ai_question', { question: text });
      
      const aiResponse = await callOpenAI(text);
      
      await sendMessage(
        chatId,
        `ü§ñ ${aiResponse}\n\n` +
        `‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö.\n` +
        `üõç –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu`
      );

      await logUserAction(userId, username, 'ai_response', { 
        question: text, 
        response: aiResponse.substring(0, 100) + '...' 
      });
    }

    // Handle callback queries (button presses)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const userId = callbackQuery.from.id;
      const username = callbackQuery.from.username;
      const data = callbackQuery.data;

      if (data === 'help_assistant' || data === 'ai_assistant') {
        await logUserAction(userId, username, 'call_support');
        
        await sendMessage(
          chatId,
          'ü§ñ **AI-–ø–æ–º–æ—â–Ω–∏–∫ JUV –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n' +
          '–Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —é–≤–µ–ª–∏—Ä–Ω—ã–º –∏–∑–¥–µ–ª–∏—è–º –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:\n\n' +
          'üíé –í—ã–±–æ—Ä–æ–º —É–∫—Ä–∞—à–µ–Ω–∏–π\n' +
          'üìè –ü–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞\n' +
          'üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–º–Ω—è—Ö –∏ –º–µ—Ç–∞–ª–ª–∞—Ö\n' +
          '‚ú® –£—Ö–æ–¥–æ–º –∑–∞ —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏\n' +
          'üí∞ –¶–µ–Ω–æ–≤—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏\n\n' +
          '–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:'
        );
      }
      else if (data === 'stats') {
        const adminId = process.env.ADMIN_ID || '195830791';
        
        if (userId.toString() === adminId) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const usersResponse = await fetch(
              `${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/users?select=*`,
              {
                headers: {
                  'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
                  'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
                  'Content-Type': 'application/json'
                }
              }
            );
            
            const users = usersResponse.ok ? await usersResponse.json() : [];
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            const ordersResponse = await fetch(
              `${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/orders?select=*`,
              {
                headers: {
                  'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
                  'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
                  'Content-Type': 'application/json'
                }
              }
            );
            
            const orders = ordersResponse.ok ? await ordersResponse.json() : [];
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            const logsResponse = await fetch(
              `${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/logs?select=*&created_at=gte.${yesterday.toISOString()}`,
              {
                headers: {
                  'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
                  'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
                  'Content-Type': 'application/json'
                }
              }
            );
            
            const logs = logsResponse.ok ? await logsResponse.json() : [];

            await sendMessage(
              chatId,
              `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JUV:**\n\n` +
              `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length || 0}\n` +
              `üõí –ó–∞–∫–∞–∑–æ–≤: ${orders.length || 0}\n` +
              `üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á): ${logs.length || 0}\n\n` +
              `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`
            );
          } catch (error) {
            console.error('Stats error:', error);
            await sendMessage(
              chatId, 
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n` +
              `Debug: Admin ID: ${adminId}, User ID: ${userId}`
            );
          }
        } else {
          await sendMessage(chatId, '‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
      }
      else if (data === 'info') {
        await sendMessage(
          chatId,
          'üìã **–°–ø—Ä–∞–≤–∫–∞ JUV**\n\n' +
          '**–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:**\n' +
          'üõç **–ú–∞–≥–∞–∑–∏–Ω** - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —É–∫—Ä–∞—à–µ–Ω–∏–π\n' +
          'ü§ñ **–ü–æ–º–æ—â—å** - —á–∞—Ç —Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º\n' +
          '‚ùì **–°–ø—Ä–∞–≤–∫–∞** - —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n' +
          '**–û –∫–æ–º–ø–∞–Ω–∏–∏:**\n\n' +
          '‚ú® JUV ‚Äî –º–∞–ª–µ–Ω—å–∫–∞—è —Å–µ–º–µ–π–Ω–∞—è —é–≤–µ–ª–∏—Ä–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π –∫–∞–º–µ–Ω—å, –∫–∞–∂–¥—ã–π –∏–∑–≥–∏–± –∏ –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –¥—É—à–æ–π.\n\n' +
          '–ú—ã –≤–æ–ø–ª–æ—â–∞–µ–º –≤ —É–∫—Ä–∞—à–µ–Ω–∏—è—Ö –Ω–µ —Ç—Ä–µ–Ω–¥—ã, –∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –≤–∞—à–∏ –∏ –Ω–∞—à–∏.\n\n' +
          'üíç –£–∫—Ä–∞—à–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑\n' +
          'üõ† –†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n' +
          'üíå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥'
        );
      }

      // Answer callback query
      await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: callbackQuery.id })
      });
    }

    return res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
} 