require('dotenv').config();

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...\n');
  
  const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://tcvylzkgjxiytyrqiece.supabase.co';
  const SUPABASE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRjdnlsemtnanhpeXR5cnFpZWNlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwMzgxNzAsImV4cCI6MjA2ODYxNDE3MH0.c89mXFxEr3FY7XFRjRTHus8w9M-V76pOBVnn7XT7jaM';
  
  if (!SUPABASE_URL || !SUPABASE_KEY) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –≤ .env —Ñ–∞–π–ª–µ');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Vercel Dashboard –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª\n');
    
    console.log('üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ Supabase Dashboard:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://supabase.com/dashboard');
    console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
    console.log('3. Table Editor ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É (users, logs, orders)');
    return;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users...');
    const usersResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/users?select=*&order=created_at.desc&limit=5`,
      {
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (usersResponse.ok) {
      const users = await usersResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      users.forEach((user, i) => {
        console.log(`${i+1}. ID: ${user.telegram_id}, Username: @${user.telegram_username || '–Ω–µ—Ç'}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É logs...');
    const logsResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/logs?select=*&order=created_at.desc&limit=10`,
      {
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (logsResponse.ok) {
      const logs = await logsResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: ${logs.length}`);
      logs.forEach((log, i) => {
        console.log(`${i+1}. ${log.action_type} - @${log.telegram_username || '–Ω–µ—Ç'} - ${new Date(log.created_at).toLocaleString()}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤');
    }
    
    console.log('\nüõí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders...');
    const ordersResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/orders?select=*&order=created_at.desc&limit=5`,
      {
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (ordersResponse.ok) {
      const orders = await ordersResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
      orders.forEach((order, i) => {
        console.log(`${i+1}. –ó–∞–∫–∞–∑ #${order.id} - ${order.total}‚ÇΩ - ${new Date(order.created_at).toLocaleString()}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
  
  console.log('\nüí° –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Supabase Dashboard');
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkDatabase();
}

module.exports = { checkDatabase }; 